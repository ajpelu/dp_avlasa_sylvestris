---
title: "Taxonomic coverage"
format: html
execute: 
  warning: false
  error: false
editor_options: 
  chunk_output_type: console
---

# Explore taxonomic coverage

```{r}
library(gbifexplorer)
library(tidyverse)
library(patchwork)
```



#### All taxa 

```{r}
# Genus 
compute_freq <- function(x, category, code_unknown = NA){ 
  
  category <- rlang::sym(category)
  
  aux <- x |> 
    dplyr::group_by(
      dplyr::across(
        dplyr::all_of(category))) |> 
    dplyr::tally(sort = TRUE) |> 
    dplyr::ungroup()
  
  dna <- aux |> dplyr::mutate(freq_all = prop.table(n) * 100)
  
  if(is.na(code_unknown)) { 
    d <- aux |> dplyr::filter(!is.na(!!sym(category))) |> dplyr::mutate(freq = prop.table(n) * 100)
  } else { 
    d <- aux |> dplyr::filter(!!sym(category) != code_unknown) |> dplyr::mutate(freq = prop.table(n) * 100)
    }
  
  out <- dplyr::full_join(dna, d) 
  return(out)
  
} 
  





compute_freq(occ, "genus")
compute_freq(occu, "genus", code_unknown = "unclass.")
compute_freq(occ, "family")
compute_freq(occ, "order")
compute_freq(occ, "class")


occu <- occ |> mutate(genus = str_replace_na(genus, replacement = "unclass."))

select_categories <- c("genus", "family")

o <- purrr::set_names(
  purrr::map(select_categories, ~compute_freq(occ, category = .x)), 
        select_categories)




  group_by(tally(genus)) |>
  mutate(freq = prop.table(n) * 100)
  
  










```



```{r}
taxonomic_freq <- function(x, category, code_unknown = NA){ 
  n <- freq  <- NULL 
  
  dwc_categories <- c(
    "kingdom", "phylum", "class",
    "order", "family", "subfamily", "genus", "scientificName")
  
  if(!(category %in% dwc_categories)) {
    stop(paste("category must be one of the:", paste(dwc_categories, collapse = ", ")))
  }

  category <- rlang::sym(category)
  
  aux <- x |> 
    dplyr::group_by(
      dplyr::across(
        dplyr::all_of(category))) |> 
    dplyr::tally(sort = TRUE) |> 
    dplyr::ungroup()
  
  dna <- aux |> dplyr::mutate(freq_all = prop.table(n) * 100)
  
  if(is.na(code_unknown)) { 
    d <- aux |> dplyr::filter(!is.na(!!sym(category))) |> dplyr::mutate(freq = prop.table(n) * 100)
  } else { 
    d <- aux |> dplyr::filter(!!sym(category) != code_unknown) |> dplyr::mutate(freq = prop.table(n) * 100)
  }
  
  out <- dplyr::full_join(dna, d) 
  return(out)
  
} 

taxonomic_freq(occ, "genus")
```


```{r}
taxonomic_cov <- function(x,
                          category = c(
                            "scientificName", "kingdom", "phylum", "class",
                            "order", "family", "subfamily", "genus", "all"
                          ),
                          code_unknown = NA) {
  all_categories <- c(
    "scientificName", "kingdom", "phylum", "class",
    "order", "family", "subfamily", "genus", "all"
  )

  if (!inherits(x, "data.frame") && !inherits(x, "tbl_df")) {
    stop("Input 'x' must be a data frame or tibble.")
  }

  if ("all" %in% category && length(category) > 1) {
    stop("Cannot combine 'all' with other categories.\n Please select 'all' categories or a combination of several categories")
  }

  if ("all" %in% category) {
    select_categories <- setdiff(all_categories, "all")
    select_categories <- select_categories[select_categories %in% names(x)]
  } else {
    select_categories <- category
  }

  # aux_summary <- function(categories) {
  #   n <- freq <- NULL
  #   x |>
  #     # group_by(!!!syms(y)) |>
  #     dplyr::group_by(dplyr::across(dplyr::all_of(categories))) |>
  #     dplyr::tally() |>
  #     dplyr::mutate(freq = prop.table(n) * 100) |>
  #     dplyr::arrange(dplyr::desc(freq))
  # }
  
  # out <- purrr::set_names(
  #           purrr::map(select_categories, ~taxonomic_freq(x, category = .x, code_unknown = code_unknown)), 
  #   select_categories)
  # 
  # 
  
  out <- select_categories |>
    purrr::map(~taxonomic_freq(x, category = .x, code_unknown = code_unknown)) |>
    purrr::set_names(select_categories)
  return(out)
}




select_categories


out <- purrr::set_names(
            purrr::map(select_categories, ~taxonomic_cov(occ, category = .x, code_unknown = code_unknown)), 
    select_categories)

```





#### All taxa 
```{r}
occ <- read_csv("output/dwc_db/occ.csv")

all_taxa <- taxonomic_cov(occ |> filter(kingdom == "Bacteria"),
                   category = c("kingdom", "phylum", "class", "order", "family", "genus"))

custom_report_taxonomy <- function(x) { 

  }
all_taxa |> 
  purrr::map(~report_taxonomy(., top=10)) |> 
  purrr::list_transpose()

```

#### Bacteria
```{r}
b <- taxonomic_cov(occ |> filter(kingdom == "Bacteria"),
                   category = c("kingdom", "phylum", "class", "order", "family", "genus"))

report <- b |> 
  purrr::map(~report_taxonomy(., top=10)) |> 
  purrr::list_transpose()




```

#### Fungi 

```{r}
f <- taxonomic_cov(occ |> filter(kingdom == "Fungi"),
                        category = c("kingdom", "phylum", "class", "order", "family", "genus"))

report <- f |> 
  purrr::map(~report_taxonomy(., top=10)) |> 
  purrr::list_transpose()







```


## Plot 

```{r}
b_genus <- b$genus |> 
  filter(!is.na(genus)) |> 
  top_n(10) |> 
  barplot_freq() + 
  ggtitle("Most frequent Genus (Bacteria)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 

f_genus <- f$genus |> 
  filter(!is.na(genus)) |> 
  top_n(10) |> 
  barplot_freq(bar_color = "#994F00") + 
  ggtitle("Most frequent Genus (Fungi)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 



b_family <- b$family |> 
  filter(!is.na(family)) |> 
  top_n(10) |> 
  barplot_freq() + 
  ggtitle("Most frequent Family (Bacteria)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 

f_family <- f$family |> 
  filter(!is.na(family)) |> 
  top_n(10) |> 
  barplot_freq(bar_color = "#994F00") + 
  ggtitle("Most frequent Family (Fungi)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 

b_order <- b$order |> 
  filter(!is.na(order)) |> 
  top_n(10) |> 
  barplot_freq() + 
  ggtitle("Most frequent Order (Bacteria)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 

f_order <- f$order |> 
  filter(!is.na(order)) |> 
  top_n(10) |> 
  barplot_freq(bar_color = "#994F00") + 
  ggtitle("Most frequent Order (Fungi)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 



b_class <- b$class |> 
  filter(!is.na(class)) |> 
  top_n(10) |> 
  barplot_freq() + 
  ggtitle("Most frequent Class (Bacteria)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 

f_class <- f$class |> 
  filter(!is.na(class)) |> 
  top_n(10) |> 
  barplot_freq(bar_color = "#994F00") + 
  ggtitle("Most frequent Class (Fungi)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 


b_phylum <- b$phylum |> 
  filter(!is.na(phylum)) |> 
  top_n(10) |> 
  barplot_freq() + 
  ggtitle("Most frequent Phyla (Bacteria)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 

f_phylum <- f$phylum |> 
  filter(!is.na(phylum)) |> 
  top_n(10) |> 
  barplot_freq(bar_color = "#994F00") + 
  ggtitle("Most frequent Phyla (Fungi)") + 
  theme(
    axis.text.y = element_text(face = "italic")
  ) 

combined_plot <- (
  (b_phylum | f_phylum) / 
    (b_class | f_class) / 
    (b_order | f_order) / 
    (b_family | f_family) / 
    (b_genus | f_genus)
) + 
  plot_layout(tag_level = 'new') +
  plot_annotation(tag_levels = c('a', '1')) & 
  theme(plot.tag = element_text(size = 12, face = 'bold', hjust = 0))
```

```{r}
#| fig-height: 14
#| fig-width: 10
combined_plot
```


```{r}
#| echo: false
ggsave(
  combined_plot, 
  file = "output/taxonomic_coverage.png",
  dpi = 300,
  width = 29.7*.8, height = 42*.7,
  units = "cm"
)
```


